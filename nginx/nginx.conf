server {
	server_name www.joppekoers.nl joppekoers.nl;
	location / {
		proxy_pass    http://nodejs:8080/;
	}
	client_max_body_size 10G;

	# ALL THE SSL STUFF BELOW
	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name torrents.joppekoers.nl;

	location / {
		proxy_pass http://qbittorrent:8081/;

		proxy_http_version      1.1;
		proxy_set_header        X-Forwarded-Host        $http_host;
		http2_push_preload on; # Enable http2 push

		# The following directives effectively nullify Cross-site request forgery (CSRF)
		# protection mechanism in qBittorrent, only use them when you encountered connection problems.
		# You should consider disable "Enable Cross-site request forgery (CSRF) protection"
		# setting in qBittorrent instead of using these directives to tamper the headers.
		# The setting is located under "Options -> WebUI tab" in qBittorrent since v4.1.2.
		#proxy_hide_header       Referer;
		#proxy_hide_header       Origin;
		#proxy_set_header        Referer                 '';
		#proxy_set_header        Origin                  '';

		# Not needed since qBittorrent v4.1.0
		#add_header              X-Frame-Options         "SAMEORIGIN";
	}

	# ALL THE SSL STUFF BELOW
	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name plex.joppekoers.nl;

	location / {
		proxy_pass http://plex:32400/;
	}

	# ALL THE SSL STUFF BELOW
	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name hours.joppekoers.nl;

	location / {
		proxy_pass http://hours:8080/;
	}

	# ALL THE SSL STUFF BELOW
	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name find-peers.joppekoers.nl;

	location / {
		proxy_pass http://find-peers:8080/;
	}

	# ALL THE SSL STUFF BELOW
	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
    server_name jellyfin.joppekoers.nl;

    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin jellyfin;
    resolver 127.0.0.11 valid=30; # docker's nameserver is on 127.0.0.11

    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.gstatic.com/eureka/clank/95/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location = / {
        return 302 https://$host/web/;
    }

    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

	listen 443 ssl;
	listen [::]:443 ssl;
	# Load the ECDSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	# Load the RSA certificates
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	# Load the Diffie-Hellman parameter
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
    # Drop any request that does not match any of the other server names
    listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
    ssl_reject_handshake on;
}

# all http traffic will already 301 redirected to https by docker-nginx-certbot
