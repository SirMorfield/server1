server {
	server_name www.joppekoers.nl joppekoers.nl;
	location / {
		proxy_pass    http://joppekoers.nl:8080/;
	}
	client_max_body_size 10G;

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name torrents.joppekoers.nl;

	location / {
		proxy_pass http://qbittorrent:8081/;

		proxy_http_version      1.1;
		proxy_set_header        X-Forwarded-Host        $http_host;
		http2_push_preload on; # Enable http2 push

		# The following directives effectively nullify Cross-site request forgery (CSRF)
		# protection mechanism in qBittorrent, only use them when you encountered connection problems.
		# You should consider disable "Enable Cross-site request forgery (CSRF) protection"
		# setting in qBittorrent instead of using these directives to tamper the headers.
		# The setting is located under "Options -> WebUI tab" in qBittorrent since v4.1.2.
		#proxy_hide_header       Referer;
		#proxy_hide_header       Origin;
		#proxy_set_header        Referer                 '';
		#proxy_set_header        Origin                  '';

		# Not needed since qBittorrent v4.1.0
		#add_header              X-Frame-Options         "SAMEORIGIN";
	}

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name plex.joppekoers.nl;

	send_timeout 100m;

	# Plex has a lot of text script which is easily compressed.
	# If these settings cause playback issues with devices, remove them. (Haven't encountered any yet)
	gzip on;
	gzip_vary on;
	gzip_min_length 1000;
	gzip_proxied any;
	gzip_types text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
	gzip_disable "MSIE [1-6]\.";

	# nginx default client_max_body_size is 1MB, which breaks Camera Upload feature from phones.
	# Increasing the limit fixes the issue.
	# Note if you are sending VERY LARGE files (e.g. 4k videos) you will need to increase this much further.
	client_max_body_size 0;

	# Set headers for Plex server.
	proxy_http_version 1.1;
	proxy_set_header Host localhost; # Forces Plex to see all connections from the proxy as local
	proxy_set_header Referer localhost; # Forces Plex to see all connections from the proxy as local
	proxy_set_header Origin $scheme://localhost:$server_port; # Forces Plex to see all connections from the proxy as local
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header Connection "upgrade";
	proxy_set_header Accept-Encoding ""; # Disables compression between Plex and Nginx

	# Disable buffering - send to the client as soon as the data is received from Plex.
	proxy_redirect off;
	proxy_buffering off;

	location / {
		proxy_pass http://plex:32400/;
	}

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

# https://jellyfin.org/docs/general/networking/nginx/
server {
    server_name jellyfin.joppekoers.nl;

    client_max_body_size 50M;

    # Security / XSS Mitigation Headers
    # NOTE: X-Frame-Options may cause issues with the webOS app
    # add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "0"; # Do NOT enable. This is obsolete/dangerous
    add_header X-Content-Type-Options "nosniff";

    # COOP/COEP. Disable if you use external plugins/images/assets
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;

    # Permissions policy. May cause issues on some clients
    add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()" always;

    # Tell browsers to use per-origin process isolation
    add_header Origin-Agent-Cluster "?1" always;


    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    # NOTE: The default CSP headers may cause issues with the webOS app
    #add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location = / {
        return 302 https://$host/web/;
    }

    location / {
        proxy_pass http://jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        proxy_pass http://jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        proxy_pass http://jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

	# Repeated ssl config, it cannot be more DRY
	listen 						443 ssl http2;
	listen						[::]:443 ssl http2;
	ssl_certificate     		/etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key 		/etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     		/etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key 		/etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam					/etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols				TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers	on;
	ssl_ciphers					"EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name find-peers.joppekoers.nl findpeers.joppekoers.nl;

	return 301 https://find-peers.codam.nl/;

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name  		files.joppekoers.nl;
	client_max_body_size 0;

	location / {
		proxy_pass http://filebrowser:80/;
	}

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name  		syncthing.joppekoers.nl;

	location / {
		proxy_pass http://syncthing:8384/;
	}

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name  		pixels.joppekoers.nl;

	location / {
		proxy_pass http://pixels:5173/;
	}

	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	server_name  		cms.joppekoers.nl;
	client_max_body_size 0;

	location / {
		proxy_pass http://cms:1337/;

		# https://docs.strapi.io/dev-docs/data-management/transfer
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
		proxy_set_header Host $host;


		# https://stackoverflow.com/questions/42589781
		# The below is equivalent to "include proxy_params;"
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}


	# Repeated ssl config, it cannot be more DRY
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-ecc/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-ecc/privkey.pem;
	ssl_certificate     /etc/letsencrypt/live/joppekoers.nl-rsa/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/joppekoers.nl-rsa/privkey.pem;
	ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DHE+AESGCM:DHE:!RSA!aNULL:!eNULL:!LOW:!RC4:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED";
}

server {
	# Drop any request that does not match any of the other server names
	listen 443 ssl default_server;
	listen [::]:443 ssl http2 default_server;
	ssl_reject_handshake on;
}

# all http traffic will already 301 redirected to https by docker-nginx-certbot
